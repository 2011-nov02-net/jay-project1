// <auto-generated />
using System;
using Aqua.Data.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Aqua.Data.Migrations
{
    [DbContext(typeof(AquaContext))]
    [Migration("20201121185316_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Aqua.Data.Model.AnimalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("smallmoney");

                    b.HasKey("Id");

                    b.ToTable("Animal", "Aqua");
                });

            modelBuilder.Entity("Aqua.Data.Model.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Customer", "Aqua");
                });

            modelBuilder.Entity("Aqua.Data.Model.InventoryItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("LocationId");

                    b.ToTable("InventoryItem", "Aqua");

                    b.HasCheckConstraint("CK_Inventory_Quantity_Nonnegative", "[Quantity] >= 0");
                });

            modelBuilder.Entity("Aqua.Data.Model.LocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("string");

                    b.HasKey("Id");

                    b.ToTable("Location", "Aqua");
                });

            modelBuilder.Entity("Aqua.Data.Model.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getDateTime())");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("smallmoney");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("Order", "Aqua");

                    b.HasCheckConstraint("CK_Order_Total_Nonnegative", "[Total] >= 0");
                });

            modelBuilder.Entity("Aqua.Data.Model.OrderItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("smallmoney");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem", "Aqua");

                    b.HasCheckConstraint("CK_OrderItem_Quantity_Nonnegative", "[Quantity] >= 0");

                    b.HasCheckConstraint("CK_OrderItem_Total_Nonnegative", "[Total] >= 0");
                });

            modelBuilder.Entity("Aqua.Data.Model.InventoryItemEntity", b =>
                {
                    b.HasOne("Aqua.Data.Model.AnimalEntity", "Animal")
                        .WithMany("Inventory")
                        .HasForeignKey("AnimalId")
                        .HasConstraintName("FK_InventoryItem_AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aqua.Data.Model.LocationEntity", "Location")
                        .WithMany("Inventory")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_InventoryItem_LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Aqua.Data.Model.OrderEntity", b =>
                {
                    b.HasOne("Aqua.Data.Model.CustomerEntity", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Order_CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aqua.Data.Model.LocationEntity", "Location")
                        .WithMany("Orders")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Order_LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Aqua.Data.Model.OrderItemEntity", b =>
                {
                    b.HasOne("Aqua.Data.Model.AnimalEntity", "Animal")
                        .WithMany("OrderItems")
                        .HasForeignKey("AnimalId")
                        .HasConstraintName("FK_OrderItem_AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aqua.Data.Model.OrderEntity", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderItem_OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Aqua.Data.Model.AnimalEntity", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Aqua.Data.Model.CustomerEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Aqua.Data.Model.LocationEntity", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Aqua.Data.Model.OrderEntity", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
